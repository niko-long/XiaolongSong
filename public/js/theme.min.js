(()=>{var ee=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports);var X=ee((ve,W)=>{W.exports=window.Tablesort});var te=X();function ne(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}function R(e,n){e=e||[];for(let t=0;t<e.length;t++)n(e[t])}function Y(){return document.documentElement&&document.documentElement.scrollTop||document.body.scrollTop}function oe(){let e=document.getElementById("menu-toggle-mobile"),n=document.getElementById("menu-mobile");window.menuToggleMobileEventListener||(e.addEventListener("click",()=>{document.body.classList.toggle("blur"),e.classList.toggle("active"),n.classList.toggle("active")}),window.menuToggleMobileEventListener=!0),window._menuMobileOnClickMask=()=>{e.classList.remove("active"),n.classList.remove("active")},window.clickMaskEventSet.add(window._menuMobileOnClickMask)}function $(e){window.setTheme(e),window.saveTheme(e)}function ie(){Array.from(document.getElementsByClassName("theme-switch")).forEach(e=>{e.addEventListener("click",()=>{let n=document.body.getAttribute("theme");$(n==="dark"?"light":"dark");for(let t of window.switchThemeEventSet)t()})})}function se(){Array.from(document.getElementsByClassName("color-theme-select")).forEach(e=>{let n=document.body.getAttribute("theme");for(let t=0;t<e.options.length;t++)if(e.options[t].value===n){e.selectedIndex=t;break}e.addEventListener("change",()=>{let t=e.value;window.localStorage&&localStorage.setItem("theme",t),t!=="auto"?$(t):window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?$("dark"):$("light");for(let i of window.switchThemeEventSet)i()})})}function Z(){let e=window.config.search,n=window.matchMedia&&window.matchMedia("only screen and (max-width: 680px)").matches;if(!e||n&&window._searchMobileOnce||!n&&window._searchDesktopOnce)return;let t=e.maxResultLength?e.maxResultLength:10,i=e.snippetLength?e.snippetLength:50,o=e.highlightTag?e.highlightTag:"em",s=e.isCaseSensitive?e.isCaseSensitive:!1,d=e.minMatchCharLength?e.minMatchCharLength:1,w=e.findAllMatches?e.findAllMatches:!1,g=e.location?e.location:0,C=e.threshold?e.threshold:.3,A=e.distance?e.distance:100,v=e.ignoreLocation?e.ignoreLocation:!1,D=e.useExtendedSearch?e.useExtendedSearch:!1,q=e.ignoreFieldNorm?e.ignoreFieldNorm:!1,L=e.termFrequency?e.termFrequency:1,O=e.pageLength?e.pageLength:.75,a=e.termSimilarity?e.termSimilarity:1,F=e.termSaturation?e.termSaturation:1.4,T=n?"mobile":"desktop",B=document.getElementById(`header-${T}`),k=document.getElementById(`search-input-${T}`),V=document.getElementById(`search-toggle-${T}`),H=document.getElementById(`search-loading-${T}`),f=document.getElementById(`search-clear-${T}`),P=window.config["autocomplete.min.js"],G=window.config["algoliasearch.min.js"],Q=window.config["pagefind.js"],J=window.config["fuse.min.js"];n?(window._searchMobileOnce=!0,k.addEventListener("focus",()=>{_("autocomplete-script",P,()=>{K(),k.focus()}),window.config?.search?.type==="algolia"?_("algolia-script",G,null):window.config?.search?.type==="fuse"?_("fuse-script",J,null):N(),document.body.classList.add("blur"),B.classList.add("open"),k.focus()}),document.getElementById("search-cancel-mobile").addEventListener("click",()=>{B.classList.remove("open"),document.body.classList.remove("blur"),document.getElementById("menu-toggle-mobile").classList.remove("active"),document.getElementById("menu-mobile").classList.remove("active"),H.style.display="none",f.style.display="none",window._searchMobile&&window._searchMobile.autocomplete.setVal("")}),f.addEventListener("click",()=>{f.style.display="none",window._searchMobile&&window._searchMobile.autocomplete.setVal("")},!1),window._searchMobileOnClickMask=()=>{B.classList.remove("open"),H.style.display="none",f.style.display="none",window._searchMobile&&window._searchMobile.autocomplete.setVal("")},window.clickMaskEventSet.add(window._searchMobileOnClickMask)):(window._searchDesktopOnce=!0,V.addEventListener("click",()=>{_("autocomplete-script",P,()=>{K(),k.focus()}),window.config?.search?.type==="algolia"?_("algolia-script",G,null):window.config?.search?.type==="fuse"?_("fuse-script",J,null):N(),document.body.classList.add("blur"),B.classList.add("open"),k.focus()}),f.addEventListener("click",()=>{f.style.display="none",window._searchDesktop&&window._searchDesktop.autocomplete.setVal("")}),document.addEventListener("keydown",p=>{p.ctrlKey&&p.code==="KeyK"&&(p.preventDefault(),V.click())}),window._searchDesktopOnClickMask=()=>{B.classList.remove("open"),H.style.display="none",f.style.display="none",window._searchDesktop&&window._searchDesktop.autocomplete.setVal("")},window.clickMaskEventSet.add(window._searchDesktopOnClickMask)),k.addEventListener("input",()=>{k.value===""?f.style.display="none":f.style.display="inline"});let K=()=>{let p=autocomplete(`#search-input-${T}`,{hint:!1,autoselect:!0,dropdownMenuContainer:`#search-dropdown-${T}`,clearOnSelected:!1,cssClasses:{noPrefix:!0},debug:!0},{name:"search",source:(m,S)=>{H.style.display="inline",f.style.display="none";let u=l=>{H.style.display="none",f.style.display="inline",S(l)};if(e.type==="algolia")window._algoliaIndex=window._algoliaIndex||algoliasearch(e.algoliaAppID,e.algoliaSearchKey).initIndex(e.algoliaIndex),window._algoliaIndex.search(m,{offset:0,length:t*8,attributesToHighlight:["title"],attributesToRetrieve:["*"],attributesToSnippet:[`content:${i}`],highlightPreTag:`<${o}>`,highlightPostTag:`</${o}>`}).then(({hits:l})=>{let c={};l.forEach(({uri:r,date:I,_highlightResult:{title:y},_snippetResult:{content:x}})=>{c[r]&&c[r].context.length>x.value||(c[r]={uri:r,title:y.value,date:I,context:x.value})}),u(Object.values(c).slice(0,t))}).catch(l=>{console.error(l),u([])});else if(e.type==="fuse"){let l=()=>{let c={};return window._fuseIndex.search(m).forEach(({item:r,refIndex:I,matches:y})=>{let x=r.title,M=r.content;y.forEach(({indices:E,value:ye,key:U})=>{if(U==="content"){let b=0;for(let h=0;h<E.length;h++){let j=M.substring(E[h][0]+b,E[h][1]+1+b),z=`<${o}>`+j+`</${o}>`;M=M.substring(0,E[h][0]+b)+z+M.substring(E[h][1]+1+b,M.length),b+=o.length*2+5}}else if(U==="title"){let b=0;for(let h=0;h<E.length;h++){let j=x.substring(E[h][0]+b,E[h][1]+1+b),z=`<${o}>`+j+`</${o}>`;x=x.substring(0,E[h][0]+b)+z+x.substring(E[h][1]+1+b,M.length),b+=o.length*2+5}}}),c[r.uri]={uri:r.uri,title:x,date:r.date,context:M}}),console.log(c),Object.values(c).slice(0,t)};window._fuseIndex?u(l()):fetch(e.fuseIndexURL).then(c=>c.json()).then(c=>{let r={isCaseSensitive:s,findAllMatches:w,minMatchCharLength:d,location:g,threshold:C,distance:A,ignoreLocation:v,useExtendedSearch:D,ignoreFieldNorm:q,includeScore:!1,shouldSort:!0,includeMatches:!0,keys:["content","title"]};window._fuseIndex=new Fuse(c,r),u(l())}).catch(c=>{console.error(c),u([])})}else window._pgfIndex===void 0&&N(),window._pgfIndex.debouncedSearch(m,300).then(l=>{if(l===null||!("results"in l)){u([]);return}Promise.all(l.results.slice(0,t).map(c=>c.data())).then(c=>{let r={};for(let I of c)for(let y of I.sub_results)y.url===void 0||!("anchor"in y)||y.anchor.element!="h2"||(r[y.url]={uri:y.url,title:I.meta.title,date:I.meta.date,context:o==="mark"?y.excerpt:y.excerpt.replace(/<mark>(.*?)<\/mark>/gi,`<${o}>$1</${o}>`)});u(Object.values(r))})})},templates:{suggestion:({title:m,uri:S,date:u,context:l})=>`<div><a href=${S}><span class="suggestion-title">${m}</span></a><span class="suggestion-date">${u}</span></div><div class="suggestion-context">${l}</div>`,empty:({query:m})=>`<div class="search-empty">${e.noResultsFound}: <span class="search-query">"${ne(m)}"</span></div>`,footer:()=>{let{searchType:m,icon:S,href:u}=e.type==="algolia"?{searchType:"algolia",icon:'<svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M229.3 182.6c-49.3 0-89.2 39.9-89.2 89.2 0 49.3 39.9 89.2 89.2 89.2s89.2-39.9 89.2-89.2c0-49.3-40-89.2-89.2-89.2zm62.7 56.6l-58.9 30.6c-1.8.9-3.8-.4-3.8-2.3V201c0-1.5 1.3-2.7 2.7-2.6 26.2 1 48.9 15.7 61.1 37.1.7 1.3.2 3-1.1 3.7zM389.1 32H58.9C26.4 32 0 58.4 0 90.9V421c0 32.6 26.4 59 58.9 59H389c32.6 0 58.9-26.4 58.9-58.9V90.9C448 58.4 421.6 32 389.1 32zm-202.6 84.7c0-10.8 8.7-19.5 19.5-19.5h45.3c10.8 0 19.5 8.7 19.5 19.5v15.4c0 1.8-1.7 3-3.3 2.5-12.3-3.4-25.1-5.1-38.1-5.1-13.5 0-26.7 1.8-39.4 5.5-1.7.5-3.4-.8-3.4-2.5v-15.8zm-84.4 37l9.2-9.2c7.6-7.6 19.9-7.6 27.5 0l7.7 7.7c1.1 1.1 1 3-.3 4-6.2 4.5-12.1 9.4-17.6 14.9-5.4 5.4-10.4 11.3-14.8 17.4-1 1.3-2.9 1.5-4 .3l-7.7-7.7c-7.6-7.5-7.6-19.8 0-27.4zm127.2 244.8c-70 0-126.6-56.7-126.6-126.6s56.7-126.6 126.6-126.6c70 0 126.6 56.6 126.6 126.6 0 69.8-56.7 126.6-126.6 126.6z"/></svg>',href:"https://www.algolia.com/"}:e.type==="fuse"?{searchType:"Fuse.js",icon:"",href:"https://fusejs.io/"}:{searchType:"pagefind",icon:"",href:"https://pagefind.app"};return`<div class="search-footer">Search by <a href="${u}" rel="noopener noreffer" target="_blank">${S} ${m}</a></div>`}}});p.on("autocomplete:selected",(m,S,u,l)=>{m.preventDefault()}),n?window._searchMobile=p:window._searchDesktop=p};function _(p,m,S){if(document.querySelector(`#${p}`)===null){let u=document.querySelector("head"),l=document.createElement("script");l.setAttribute("src",m),l.setAttribute("id",p),l.onload=S,u.appendChild(l)}}function N(){import(Q).then(p=>{window._pgfIndex=p,window._pgfIndex.options({excerptLength:i,termFrequency:L,pageLength:O,termSimilarity:a,termSaturation:F}).then(()=>{window._pgfIndex.init()})})}}function le(){document.querySelectorAll(".details").forEach(e=>{let n=e.getElementsByClassName("details-summary")[0],t=n.nextElementSibling;e.classList.contains("open")&&(t.style.maxHeight=t.scrollHeight+"px"),n.addEventListener("click",()=>{e.classList.contains("open")?t.style.maxHeight="0px":t.style.maxHeight=t.scrollHeight+"px",e.classList.toggle("open")},!1),addEventListener("beforeprint",()=>{e.classList.contains("open")||n.click()})})}function ce(){window.config.lightGallery&&lightGallery(document.getElementById("content"),window.config.lightGallery)}function ae(){R(document.querySelectorAll(".content table"),e=>{let n=document.createElement("div");n.className="table-wrapper",e.parentElement.replaceChild(n,e),n.appendChild(e),window.config?.table?.sort&&new te(e)})}function re(){let e=document.getElementById("TableOfContents");if(e===null)return;let n=window.matchMedia&&window.matchMedia("only screen and (max-width: 1000px)").matches;if(document.getElementById("toc-static").getAttribute("kept")||n)window._tocOnScroll&&window.scrollEventSet.delete(window._tocOnScroll);else{let t=document.getElementById("toc-auto"),i=e.querySelectorAll("a:first-child"),o=e.getElementsByTagName("li"),s=document.getElementsByClassName("headerLink"),d=document.body.getAttribute("header-desktop")!=="normal",w=document.getElementById("header-desktop").offsetHeight,g=20+(d?w:0),C=t.offsetTop,A=C-g+(d?0:w);window._tocOnScroll=window._tocOnScroll||(()=>{let D=document.getElementById("post-footer").offsetTop-t.getBoundingClientRect().height,q=D-g+(d?0:w);if(window.newScrollTop<A?(t.style.position="absolute",t.style.top=`${C}px`):window.newScrollTop>q?(t.style.position="absolute",t.style.top=`${D}px`):(t.style.position="fixed",t.style.top=`${g}px`),i.length===0)return;let L=-1,O=g+window.newScrollTop;if(s.length>0)if(s[s.length-1].offsetTop<O)L=s.length-1;else for(let a=0;a<s.length-1;a++){let F=s[a].offsetTop,T=s[a+1].offsetTop;if(F<=O&&T>O){L=a;break}}if(Array.from(i).forEach(a=>a.classList.remove("active")),Array.from(o).forEach(a=>a.classList.remove("has-active")),L>=0&&L<i.length){i[L].classList.add("active");let a=i[L].parentElement;for(;a!==e;)a.classList.add("has-active"),a=a.parentElement.parentElement}}),window._tocOnScroll(),window.scrollEventSet.add(window._tocOnScroll)}}function de(){window.config.mapbox&&(mapboxgl.accessToken=window.config.mapbox.accessToken,mapboxgl.setRTLTextPlugin(window.config.mapbox.RTLTextPlugin),window._mapboxArr=window._mapboxArr||[],R(document.getElementsByClassName("mapbox"),e=>{let{lng:n,lat:t,zoom:i,lightStyle:o,darkStyle:s,marked:d,navigation:w,geolocate:g,scale:C,fullscreen:A}=window.config.data[e.id],v=new mapboxgl.Map({container:e,center:[n,t],zoom:i,minZoom:.2,style:window.isDark?s:o,attributionControl:!1});d&&new mapboxgl.Marker().setLngLat([n,t]).addTo(v),w&&v.addControl(new mapboxgl.NavigationControl,"bottom-right"),g&&v.addControl(new mapboxgl.GeolocateControl({positionOptions:{enableHighAccuracy:!0},showUserLocation:!0,trackUserLocation:!0}),"bottom-right"),C&&v.addControl(new mapboxgl.ScaleControl),A&&v.addControl(new mapboxgl.FullscreenControl),v.addControl(new MapboxLanguage),window._mapboxArr.push(v)}),window._mapboxOnSwitchTheme=()=>{R(window._mapboxArr,e=>{let n=e.getContainer(),{lightStyle:t,darkStyle:i}=window.config.data[n.id];e.setStyle(window.isDark?i:t),e.addControl(new MapboxLanguage)})},window.switchThemeEventSet.add(window._mapboxOnSwitchTheme))}function ue(){if(window.config.typeit){let e=window.config.typeit,n=e.speed?e.speed:100,t=e.cursorSpeed?e.cursorSpeed:1e3,i=e.cursorChar?e.cursorChar:"|";Object.values(e.data).forEach(o=>{let s=d=>{let w=o[d];if(!document.getElementById(w).hasAttribute("data-typeit-id")){let g=new TypeIt(`#${w}`,{strings:window.config.data[w],speed:n,lifeLike:!0,cursorSpeed:t,cursorChar:i,waitUntilVisible:!0,afterComplete:()=>{if(d===o.length-1){e.duration>=0&&window.setTimeout(()=>{g.destroy()},e.duration);return}g.destroy(),s(d+1)}}).go()}};s(0)})}}function we(){function e(i){let o=document.getElementsByTagName("meta");for(let s=0;s<o.length;s++)if(o[s].getAttribute("name")===i)return o[s]}let n=e("theme-color"),t={light:"#f8f8f8",dark:"#161b22"};window._metaThemeColorOnSwitchTheme=()=>{n.content=t[document.body.getAttribute("theme")]},window.switchThemeEventSet.add(window._metaThemeColorOnSwitchTheme),window._metaThemeColorOnSwitchTheme()}function me(){let e=document.getElementById("back-to-top-button");function n(){window.newScrollTop=Y(),window.newScrollTop>20?e.style.opacity="1":e.style.opacity="0";for(let t of window.scrollEventSet)t();window.oldScrollTop=window.newScrollTop}window.addEventListener("scroll",n,!1)}function he(){window.addEventListener("resize",()=>{window._resizeTimeout||(window._resizeTimeout=window.setTimeout(()=>{window._resizeTimeout=null;for(let e of window.resizeEventSet)e();Z()},100))},!1)}function ge(){document.getElementById("mask").addEventListener("click",()=>{for(let e of window.clickMaskEventSet)e();document.body.classList.remove("blur")},!1)}function pe(){document.querySelectorAll(".code-block").forEach(e=>{let n=e.querySelector("div.code-block-title-bar"),t=e.querySelector("code.chroma"),i=e.querySelector("button.copy-code-button"),o=i.querySelector("span.copy-icon"),s=i.querySelector("span.check-icon"),d=e.querySelector("button.wrap-code-button"),w=e.querySelector("button.line-number-button");t.style.maxHeight=t.scrollHeight+10+"px",n.addEventListener("click",()=>{e.classList.toggle("is-open"),e.classList.toggle("is-closed")}),i?.addEventListener("click",()=>{navigator.clipboard.writeText(t.textContent),o.style.display="none",s.style.display="block",setTimeout(()=>{o.style.display="block",s.style.display="none"},3e3)}),d?.addEventListener("click",()=>{t.style.maxHeight="fit-content",e.classList.toggle("is-wrap"),t.style.maxHeight=t.scrollHeight+10+"px"}),w.addEventListener("click",()=>{e.classList.toggle("show-line-numbers")}),addEventListener("beforeprint",g=>{e.classList.contains("is-closed")&&n.click(),e.classList.contains("is-wrap")||d.click()})})}function fe(){window.isDark=document.body.getAttribute("theme")!=="light",window.newScrollTop=Y(),window.oldScrollTop=window.newScrollTop,window.scrollEventSet=new Set,window.resizeEventSet=new Set,window.clickMaskEventSet=new Set,window.objectFitImages&&objectFitImages(),oe(),ie(),se(),we(),Z(),pe(),le(),ce(),ae(),ue(),de(),re(),me(),he(),ge()}fe();})();
//# sourceMappingURL=data:application/json;base64,
